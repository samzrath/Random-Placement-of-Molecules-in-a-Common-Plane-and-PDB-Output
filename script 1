import MDAnalysis as mda
import numpy as np
import random
from Bio.PDB import PDBParser, PDBIO, Model, Structure

# Load the PDB molecule (replace 'GL13Kcoil.pdb' with the actual file name)
molecule = mda.Universe('GL13Kcoil.pdb')

# Define the normal vector for the plane
normal_vector = np.array([0.0, 0.0, 1.0])

# Calculate the distance of the plane from the origin (assuming it passes through the origin)
d = 0.0

# Create an empty list to store the coordinates of the 16 molecules
molecules_in_plane = []

# Generate random positions for the molecules in the same plane
num_molecules = 16
separation_distance = 20.0  # Minimum separation distance (at least 20 nm)

for i in range(num_molecules):
    valid_position = False

    while not valid_position:
        # Generate random angles to determine the direction
        theta = random.uniform(0, 2 * np.pi)  # Random angle in radians

        # Calculate the offsets in X and Y directions
        x_offset = random.uniform(20.0, 100.0) * np.cos(theta)  # Random separation, at least 20 nm
        y_offset = random.uniform(20.0, 100.0) * np.sin(theta)  # Random separation, at least 20 nm

        # Calculate the corresponding Z coordinate to ensure they are in the same plane
        z_offset = -(normal_vector[0] * x_offset + normal_vector[1] * y_offset + d) / normal_vector[2]

        # Create a copy of the original molecule and position it
        new_molecule = molecule.copy()
        new_molecule.atoms.positions += [x_offset, y_offset, z_offset]

        # Check if this molecule's position is at least 20 nm from every other molecule
        min_distance = float('inf')

        for mol in molecules_in_plane:
            distances = np.linalg.norm(new_molecule.atoms.positions - mol.atoms.positions, axis=1)
            min_distance = min(min_distance, np.min(distances))

        if min_distance >= separation_distance:
            molecules_in_plane.append(new_molecule)
            valid_position = True

# Create a combined Universe
combined_universe = mda.Merge(*[mol.atoms for mol in molecules_in_plane])

# Save the combined Universe as a single PDB file
combined_universe.atoms.write('all_molecules_combined.pdb')
print("Saved all molecules as all_molecules_combined.pdb")
